/*
 * This file is generated by jOOQ.
 */
package com.mpp.jooq.generated.tables.records;


import com.mpp.jooq.generated.tables.Registratore;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RegistratoreRecord extends UpdatableRecordImpl<RegistratoreRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Registratore.IdRegistratore</code>.
     */
    public void setIdregistratore(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Registratore.IdRegistratore</code>.
     */
    public Integer getIdregistratore() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Registratore.IdScontrino</code>.
     */
    public void setIdscontrino(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>Registratore.IdScontrino</code>.
     */
    public Integer getIdscontrino() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Registratore.REGISTRATORE.IDREGISTRATORE;
    }

    @Override
    public Field<Integer> field2() {
        return Registratore.REGISTRATORE.IDSCONTRINO;
    }

    @Override
    public Integer component1() {
        return getIdregistratore();
    }

    @Override
    public Integer component2() {
        return getIdscontrino();
    }

    @Override
    public Integer value1() {
        return getIdregistratore();
    }

    @Override
    public Integer value2() {
        return getIdscontrino();
    }

    @Override
    public RegistratoreRecord value1(Integer value) {
        setIdregistratore(value);
        return this;
    }

    @Override
    public RegistratoreRecord value2(Integer value) {
        setIdscontrino(value);
        return this;
    }

    @Override
    public RegistratoreRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RegistratoreRecord
     */
    public RegistratoreRecord() {
        super(Registratore.REGISTRATORE);
    }

    /**
     * Create a detached, initialised RegistratoreRecord
     */
    public RegistratoreRecord(Integer idregistratore, Integer idscontrino) {
        super(Registratore.REGISTRATORE);

        setIdregistratore(idregistratore);
        setIdscontrino(idscontrino);
        resetChangedOnNotNull();
    }
}
