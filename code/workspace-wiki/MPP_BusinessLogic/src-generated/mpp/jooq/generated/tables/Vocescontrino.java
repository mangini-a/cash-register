/*
 * This file is generated by jOOQ.
 */
package mpp.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import mpp.jooq.generated.DefaultSchema;
import mpp.jooq.generated.Keys;
import mpp.jooq.generated.tables.records.VocescontrinoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vocescontrino extends TableImpl<VocescontrinoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VoceScontrino</code>
     */
    public static final Vocescontrino VOCESCONTRINO = new Vocescontrino();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VocescontrinoRecord> getRecordType() {
        return VocescontrinoRecord.class;
    }

    /**
     * The column <code>VoceScontrino.IdScontrino</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> IDSCONTRINO = createField(DSL.name("IdScontrino"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VoceScontrino.IdProdotto</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> IDPRODOTTO = createField(DSL.name("IdProdotto"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VoceScontrino.QtaProdotto</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> QTAPRODOTTO = createField(DSL.name("QtaProdotto"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VoceScontrino.DataOra</code>.
     */
    public final TableField<VocescontrinoRecord, String> DATAORA = createField(DSL.name("DataOra"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("datetime('now')"), SQLDataType.CLOB)), this, "");

    private Vocescontrino(Name alias, Table<VocescontrinoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vocescontrino(Name alias, Table<VocescontrinoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VoceScontrino</code> table reference
     */
    public Vocescontrino(String alias) {
        this(DSL.name(alias), VOCESCONTRINO);
    }

    /**
     * Create an aliased <code>VoceScontrino</code> table reference
     */
    public Vocescontrino(Name alias) {
        this(alias, VOCESCONTRINO);
    }

    /**
     * Create a <code>VoceScontrino</code> table reference
     */
    public Vocescontrino() {
        this(DSL.name("VoceScontrino"), null);
    }

    public <O extends Record> Vocescontrino(Table<O> child, ForeignKey<O, VocescontrinoRecord> key) {
        super(child, key, VOCESCONTRINO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VocescontrinoRecord> getPrimaryKey() {
        return Keys.VOCESCONTRINO__PK_VOCESCONTRINO;
    }

    @Override
    public List<ForeignKey<VocescontrinoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_PRODOTTO);
    }

    private transient Prodotto _prodotto;

    /**
     * Get the implicit join path to the <code>Prodotto</code> table.
     */
    public Prodotto prodotto() {
        if (_prodotto == null)
            _prodotto = new Prodotto(this, Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_PRODOTTO);

        return _prodotto;
    }

    @Override
    public Vocescontrino as(String alias) {
        return new Vocescontrino(DSL.name(alias), this);
    }

    @Override
    public Vocescontrino as(Name alias) {
        return new Vocescontrino(alias, this);
    }

    @Override
    public Vocescontrino as(Table<?> alias) {
        return new Vocescontrino(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(String name) {
        return new Vocescontrino(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(Name name) {
        return new Vocescontrino(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(Table<?> name) {
        return new Vocescontrino(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
