/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Collection;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.Prodotto.ProdottoPath;
import jooq.generated.tables.Vocescontrino.VocescontrinoPath;
import jooq.generated.tables.records.ScontrinoRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Scontrino extends TableImpl<ScontrinoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Scontrino</code>
     */
    public static final Scontrino SCONTRINO = new Scontrino();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScontrinoRecord> getRecordType() {
        return ScontrinoRecord.class;
    }

    /**
     * The column <code>Scontrino.IdScontrino</code>.
     */
    public final TableField<ScontrinoRecord, Integer> IDSCONTRINO = createField(DSL.name("IdScontrino"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Scontrino.DataOra</code>.
     */
    public final TableField<ScontrinoRecord, String> DATAORA = createField(DSL.name("DataOra"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("datetime('now')"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>Scontrino.PrezzoTot</code>.
     */
    public final TableField<ScontrinoRecord, Float> PREZZOTOT = createField(DSL.name("PrezzoTot"), SQLDataType.REAL.nullable(false), this, "");

    private Scontrino(Name alias, Table<ScontrinoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Scontrino(Name alias, Table<ScontrinoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Scontrino</code> table reference
     */
    public Scontrino(String alias) {
        this(DSL.name(alias), SCONTRINO);
    }

    /**
     * Create an aliased <code>Scontrino</code> table reference
     */
    public Scontrino(Name alias) {
        this(alias, SCONTRINO);
    }

    /**
     * Create a <code>Scontrino</code> table reference
     */
    public Scontrino() {
        this(DSL.name("Scontrino"), null);
    }

    public <O extends Record> Scontrino(Table<O> path, ForeignKey<O, ScontrinoRecord> childPath, InverseForeignKey<O, ScontrinoRecord> parentPath) {
        super(path, childPath, parentPath, SCONTRINO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ScontrinoPath extends Scontrino implements Path<ScontrinoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ScontrinoPath(Table<O> path, ForeignKey<O, ScontrinoRecord> childPath, InverseForeignKey<O, ScontrinoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ScontrinoPath(Name alias, Table<ScontrinoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ScontrinoPath as(String alias) {
            return new ScontrinoPath(DSL.name(alias), this);
        }

        @Override
        public ScontrinoPath as(Name alias) {
            return new ScontrinoPath(alias, this);
        }

        @Override
        public ScontrinoPath as(Table<?> alias) {
            return new ScontrinoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ScontrinoRecord> getPrimaryKey() {
        return Keys.SCONTRINO__PK_SCONTRINO;
    }

    private transient VocescontrinoPath _vocescontrino;

    /**
     * Get the implicit to-many join path to the <code>VoceScontrino</code>
     * table
     */
    public VocescontrinoPath vocescontrino() {
        if (_vocescontrino == null)
            _vocescontrino = new VocescontrinoPath(this, null, Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_SCONTRINO.getInverseKey());

        return _vocescontrino;
    }

    /**
     * Get the implicit many-to-many join path to the <code>Prodotto</code>
     * table
     */
    public ProdottoPath prodotto() {
        return vocescontrino().prodotto();
    }

    @Override
    public Scontrino as(String alias) {
        return new Scontrino(DSL.name(alias), this);
    }

    @Override
    public Scontrino as(Name alias) {
        return new Scontrino(alias, this);
    }

    @Override
    public Scontrino as(Table<?> alias) {
        return new Scontrino(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scontrino rename(String name) {
        return new Scontrino(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scontrino rename(Name name) {
        return new Scontrino(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scontrino rename(Table<?> name) {
        return new Scontrino(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino where(Condition condition) {
        return new Scontrino(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scontrino where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scontrino where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scontrino where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Scontrino where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Scontrino whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
