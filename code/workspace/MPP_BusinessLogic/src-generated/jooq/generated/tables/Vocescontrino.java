/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import jooq.generated.DefaultSchema;
import jooq.generated.Keys;
import jooq.generated.tables.Prodotto.ProdottoPath;
import jooq.generated.tables.Scontrino.ScontrinoPath;
import jooq.generated.tables.records.VocescontrinoRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Vocescontrino extends TableImpl<VocescontrinoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VoceScontrino</code>
     */
    public static final Vocescontrino VOCESCONTRINO = new Vocescontrino();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VocescontrinoRecord> getRecordType() {
        return VocescontrinoRecord.class;
    }

    /**
     * The column <code>VoceScontrino.IdScontrino</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> IDSCONTRINO = createField(DSL.name("IdScontrino"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VoceScontrino.IdProdotto</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> IDPRODOTTO = createField(DSL.name("IdProdotto"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VoceScontrino.QtaProdotto</code>.
     */
    public final TableField<VocescontrinoRecord, Integer> QTAPRODOTTO = createField(DSL.name("QtaProdotto"), SQLDataType.INTEGER.nullable(false), this, "");

    private Vocescontrino(Name alias, Table<VocescontrinoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Vocescontrino(Name alias, Table<VocescontrinoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>VoceScontrino</code> table reference
     */
    public Vocescontrino(String alias) {
        this(DSL.name(alias), VOCESCONTRINO);
    }

    /**
     * Create an aliased <code>VoceScontrino</code> table reference
     */
    public Vocescontrino(Name alias) {
        this(alias, VOCESCONTRINO);
    }

    /**
     * Create a <code>VoceScontrino</code> table reference
     */
    public Vocescontrino() {
        this(DSL.name("VoceScontrino"), null);
    }

    public <O extends Record> Vocescontrino(Table<O> path, ForeignKey<O, VocescontrinoRecord> childPath, InverseForeignKey<O, VocescontrinoRecord> parentPath) {
        super(path, childPath, parentPath, VOCESCONTRINO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class VocescontrinoPath extends Vocescontrino implements Path<VocescontrinoRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> VocescontrinoPath(Table<O> path, ForeignKey<O, VocescontrinoRecord> childPath, InverseForeignKey<O, VocescontrinoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private VocescontrinoPath(Name alias, Table<VocescontrinoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public VocescontrinoPath as(String alias) {
            return new VocescontrinoPath(DSL.name(alias), this);
        }

        @Override
        public VocescontrinoPath as(Name alias) {
            return new VocescontrinoPath(alias, this);
        }

        @Override
        public VocescontrinoPath as(Table<?> alias) {
            return new VocescontrinoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<VocescontrinoRecord> getPrimaryKey() {
        return Keys.VOCESCONTRINO__PK_VOCESCONTRINO;
    }

    @Override
    public List<ForeignKey<VocescontrinoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_SCONTRINO, Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_PRODOTTO);
    }

    private transient ScontrinoPath _scontrino;

    /**
     * Get the implicit join path to the <code>Scontrino</code> table.
     */
    public ScontrinoPath scontrino() {
        if (_scontrino == null)
            _scontrino = new ScontrinoPath(this, Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_SCONTRINO, null);

        return _scontrino;
    }

    private transient ProdottoPath _prodotto;

    /**
     * Get the implicit join path to the <code>Prodotto</code> table.
     */
    public ProdottoPath prodotto() {
        if (_prodotto == null)
            _prodotto = new ProdottoPath(this, Keys.VOCESCONTRINO__FK_VOCESCONTRINO_PK_PRODOTTO, null);

        return _prodotto;
    }

    @Override
    public Vocescontrino as(String alias) {
        return new Vocescontrino(DSL.name(alias), this);
    }

    @Override
    public Vocescontrino as(Name alias) {
        return new Vocescontrino(alias, this);
    }

    @Override
    public Vocescontrino as(Table<?> alias) {
        return new Vocescontrino(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(String name) {
        return new Vocescontrino(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(Name name) {
        return new Vocescontrino(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vocescontrino rename(Table<?> name) {
        return new Vocescontrino(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino where(Condition condition) {
        return new Vocescontrino(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vocescontrino where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vocescontrino where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vocescontrino where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Vocescontrino where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Vocescontrino whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
